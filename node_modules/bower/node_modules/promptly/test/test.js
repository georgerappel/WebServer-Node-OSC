'use strict';

var expect   = require('expect.js');
var promptly = require('../index');
var async    = require('async');

var stdout = '';
var oldWrite = process.stdout.write;
process.stdout.write = function (data) {
    stdout += data;
    return oldWrite.apply(process.stdout, arguments);
};

describe('prompt()', function () {
    it('should prompt the user', function (next) {
        stdout = '';

        promptly.prompt('something: ', function (err, value) {
            expect(err).to.be(null);
            expect(value).to.be('yeaa');
            expect(stdout).to.contain('something: ');
            next();
        });

        process.stdin.emit('data', 'yeaa\n');
    });

    it('should keep asking if no value is passed and no default was defined', function (next) {
        stdout = '';

        promptly.prompt('something: ', function (err, value) {
            expect(err).to.be(null);
            expect(value).to.be('yeaa');
            expect(stdout).to.contain('something: ');
            expect(stdout.indexOf('something')).to.not.be(stdout.lastIndexOf('something'));
            next();
        });

        process.stdin.emit('data', '\n');
        process.stdin.emit('data', 'yeaa\n');
    });

    it('should assume default value if nothing is passed', function (next) {
        stdout = '';

        promptly.prompt('something: ', { 'default': '' }, function (err, value) {
            expect(err).to.be(null);
            expect(value).to.be('');
            expect(stdout).to.contain('something: ');
            next();
        });

        process.stdin.emit('data', '\n');
    });

    it('should trim the user input if trim is enabled', function (next) {
        stdout = '';

        promptly.prompt('something: ', { trim: true }, function (err, value) {
            expect(err).to.be(null);
            expect(value).to.be('yeaa');
            expect(stdout).to.contain('something: ');
            next();
        });

        process.stdin.emit('data', ' yeaa \n');
    });

    it('should call validator after trimming', function (next) {
        stdout = '';

        var validator = function (value) {
            if (value !== 'yeaa') {
                throw new Error('bla');
            }

            return value;
        };

        promptly.prompt('something: ', { validator: validator, retry: false }, function (err, value) {
            expect(err).to.be(null);
            expect(value).to.be('yeaa');
            expect(stdout).to.contain('something: ');
            next();
        });

        process.stdin.emit('data', ' yeaa \n');
    });

    it('should assume values from the validator', function (next) {
        stdout = '';

        var validator = function () { return 'bla'; };

        promptly.prompt('something: ', { validator: validator }, function (err, value) {
            expect(err).to.be(null);
            expect(value).to.be('bla');
            expect(stdout).to.contain('something: ');
            next();
        });

        process.stdin.emit('data', ' yeaa \n');
    });

    it('should automatically retry if a validator fails by default', function (next) {
        stdout = '';

        var validator = function (value) {
            if (value !== 'yeaa') {
                throw new Error('bla');
            }

            return value;
        };

        promptly.prompt('something: ', { validator: validator, retry: true }, function (err, value) {
            expect(stdout).to.contain('something: ');
            expect(stdout.indexOf('something')).to.not.be(stdout.lastIndexOf('something'));
    